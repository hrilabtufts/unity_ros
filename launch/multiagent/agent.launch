<launch>
    <arg name="agent_name"    default="agent"                                     />
    <arg name="launch_map"    default="true"                                      />
    <arg name="map"           default="$(find unity_ros)/maps/SpaceStation6.yaml" />

    <param name="robot_description"
           command="$(find xacro)/xacro '$(find unity_ros)/launch/multiagent/agent.xacro'
                                         PREFIX:=$(arg agent_name)"
    />

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <node name="move_base" pkg="move_base" type="move_base" output="screen">
        <rosparam file="$(find unity_ros)/config/costmap_common_params.yaml"       command="load" ns="global_costmap"/>
        <rosparam file="$(find unity_ros)/config/costmap_common_params.yaml"       command="load" ns="local_costmap" />
        <rosparam file="$(find unity_ros)/config/local_costmap_params.yaml"        command="load"                    />
        <rosparam file="$(find unity_ros)/config/global_costmap_params.yaml"       command="load"                    />
        <rosparam file="$(find unity_ros)/config/dwa_local_planner_params.yaml"    command="load"                    />
        <rosparam file="$(find unity_ros)/config/move_base_params.yaml"            command="load"                    />
        <rosparam file="$(find unity_ros)/config/global_planner_params.yaml"       command="load"                    />
        <rosparam file="$(find unity_ros)/config/navfn_global_planner_params.yaml" command="load"                    />

        <param name="DWAPlannerROS/global_frame_id"   type="string" value="$(arg agent_name)_odom_combined"/>
        <param name="global_costmap/robot_base_frame" type="string" value="$(arg agent_name)_base_link"    />
        <param name="local_costmap/global_frame"      type="string" value="$(arg agent_name)_odom_combined"/>
        <param name="local_costmap/robot_base_frame"  type="string" value="$(arg agent_name)_base_link"    />

        <remap from="map" to="/map" />
    </node>

    <group if="$(arg launch_map)">
        <node pkg="map_server" type="map_server" name="map_server" args="$(arg map)" />
    </group>

    <!-- because everything here is happening locally, we don't have sensor
    inputs like lasers or odometry. for the sake of testing we'll spoof it, but
    for deployment (to vm or robot) this will have to get replaced with the
    appropriate sensing interfaces. -->
    <param name="base_link_frame_id" value="$(arg agent_name)_base_link"/>
    <param name="odom_link_frame_id" value="$(arg agent_name)_odom_combined"/>
    <node name="odometry" pkg="spoof_sensing" type="odom.py"/>

    <param name="laser_frame_id" value="$(arg agent_name)_laser"/>
    <node name="lidar"    pkg="spoof_sensing" type="lidar.py"/>

    <node pkg="amcl" type="amcl" name="amcl" output="screen">
        <remap from="map" to="/map" />

        <param name="use_map_topic" type="bool"   value="true" />
        <param name="base_frame_id" type="string" value="$(arg agent_name)_base_link"     />
        <param name="odom_frame_id" type="string" value="$(arg agent_name)_odom_combined" />
    </node>

    <!--rosparam command="load" file="$(find unity_ros)/config/joint_state_config.yaml" />
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_publisher"/-->
</launch>
